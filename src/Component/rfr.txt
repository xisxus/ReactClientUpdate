import { useState } from "react"

export const Create = () => {
    // Initial state for category and products
    const [catagory, setCatagory] = useState({
      name: "",
      products: [],
    });
  
    // Temporary product array
    let tempProducts = [];
  
    // Add new product to the temporary product array
    const addProductToTemp = () => {
      tempProducts.push({
        color: "",
        listPrice: 0,
        name: "",
        productID: tempProducts.length + 1, // Assign unique productID
        productNumber: "",
        size: 0,
        standardCost: 0,
        weight: 0,
      });
      // Update category state with new product
      setCatagory({ ...catagory, products: tempProducts });
    };
  
    // Handle category name change
    const handleCataChange = (e) => {
      setCatagory({
        ...catagory,
        [e.target.name]: e.target.value,
      });
    };
  
    // Handle changes in product inputs
    const handleProChange = (e, index) => {
      const { name, value } = e.target;
      const updatedProducts = [...catagory.products];
      updatedProducts[index][name] = value;
  
      // Update category state with modified products
      setCatagory({
        ...catagory,
        products: updatedProducts,
      });
    };
  
    // Submit the category and products to the server
    const createCatagory = (e) => {
      e.preventDefault();
  
      // Send POST request with category and products data
      fetch('https://localhost:7115/ProductCategories', {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(catagory), // Send the entire category including products
      })
        .then((res) => res.json())
        .then((data) => {
          console.log(data);
          alert('Category and Products created successfully!');
          clearAll(); // Clear form after successful submission
        })
        .catch((error) => {
          alert('Error creating category: ' + error.message);
        });
    };
  
    // Clear the form after submission
    const clearAll = () => {
      setCatagory({
        name: "",
        products: [],
      });
      tempProducts = []; // Clear temporary products array
    };
  
    return (
      <>
        <div>
          <h1>Create Product</h1>
          <form onSubmit={createCatagory}>
            <div className="row">
              <div className="col-3">
                <label htmlFor="catagoryName">Category Name</label>
                <input
                  type="text"
                  name="name"
                  id="catagoryName"
                  value={catagory.name}
                  onChange={handleCataChange}
                  className="form-control"
                />
              </div>
            </div>
  
            <h2>Products</h2>
            {catagory.products.map((p, i) => (
              <div key={i} className="card mb-3 p-3">
                <div className="row">
                  <div className="col-3">
                    <label htmlFor={`name-${i}`}>Product Name</label>
                    <input
                      type="text"
                      id={`name-${i}`}
                      name="name"
                      value={p.name}
                      onChange={(e) => handleProChange(e, i)}
                      className="form-control"
                    />
                  </div>
  
                  <div className="col-3">
                    <label htmlFor={`productNumber-${i}`}>Product Number</label>
                    <input
                      type="text"
                      id={`productNumber-${i}`}
                      name="productNumber"
                      value={p.productNumber}
                      onChange={(e) => handleProChange(e, i)}
                      className="form-control"
                    />
                  </div>
  
                  <div className="col-3">
                    <label htmlFor={`color-${i}`}>Color</label>
                    <input
                      type="text"
                      id={`color-${i}`}
                      name="color"
                      value={p.color}
                      onChange={(e) => handleProChange(e, i)}
                      className="form-control"
                    />
                  </div>
  
                  <div className="col-3">
                    <label htmlFor={`listPrice-${i}`}>List Price</label>
                    <input
                      type="number"
                      id={`listPrice-${i}`}
                      name="listPrice"
                      value={p.listPrice}
                      onChange={(e) => handleProChange(e, i)}
                      className="form-control"
                    />
                  </div>
                </div>
  
                <div className="row mt-3">
                  <div className="col-3">
                    <label htmlFor={`weight-${i}`}>Weight</label>
                    <input
                      type="number"
                      id={`weight-${i}`}
                      name="weight"
                      value={p.weight}
                      onChange={(e) => handleProChange(e, i)}
                      className="form-control"
                    />
                  </div>
  
                  <div className="col-3">
                    <label htmlFor={`standardCost-${i}`}>Standard Cost</label>
                    <input
                      type="number"
                      id={`standardCost-${i}`}
                      name="standardCost"
                      value={p.standardCost}
                      onChange={(e) => handleProChange(e, i)}
                      className="form-control"
                    />
                  </div>
  
                  <div className="col-3">
                    <label htmlFor={`size-${i}`}>Size</label>
                    <input
                      type="number"
                      id={`size-${i}`}
                      name="size"
                      value={p.size}
                      onChange={(e) => handleProChange(e, i)}
                      className="form-control"
                    />
                  </div>
                </div>
              </div>
            ))}
  
            <button
              type="button"
              onClick={addProductToTemp}
              className="btn btn-secondary"
            >
              Add New Product
            </button>
  
            <br />
            <br />
  
            <button type="submit" className="btn btn-primary">
              Create Category and Products
            </button>
          </form>
        </div>
      </>
    );
  };